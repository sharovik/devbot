locals {
  container_definition = {
    essential = true
    name      = local.application
    image     = "${local.account_id}.dkr.ecr.us-east-1.amazonaws.com/devbot"
    environment = [
      {
        name  = "APP_ENV"
        value = "development"
      },
      {
        name  = "MESSAGES_API_MAIN_CHANNEL_ALIAS"
        value = "general"
      },
      {
        name  = "MESSAGES_API_BASE_URL"
        value = "https://slack.com/api"
      },
      {
        name  = "MESSAGES_API_OAUTH_TOKEN"
        value = "TOKEN_HERE"
      },
      {
        name  = "MESSAGES_API_WEB_API_OAUTH_TOKEN"
        value = "TOKEN_HERE"
      },
      {
        name  = "MESSAGES_API_BOT_NAME"
        value = "DevBot"
      },
      {
        name  = "MESSAGES_API_USER_ID"
        value = "__PUT_USER_ID_HERE__"
      },
      {
        name  = "MESSAGES_API_MAIN_CHANNEL_ID"
        value = "__PUT_MAIN_ID_HERE__"
      },
      {
        name  = "DATABASE_CONNECTION"
        value = "sqlite"
      },
      {
        name  = "DATABASE_HOST"
        value = "./devbot.sqlite"
      },
      {
        name  = "DATABASE_USERNAME"
        value = ""
      },
      {
        name  = "DATABASE_PASSWORD"
        value = ""
      },
      {
        name  = "BITBUCKET_CLIENT_ID"
        value = ""
      },
      {
        name  = "BITBUCKET_CLIENT_SECRET"
        value = ""
      },
      {
        name  = "BITBUCKET_REQUIRED_REVIEWERS"
        value = ""
      },
      {
        name  = "BITBUCKET_USER_UUID"
        value = ""
      },
      {
        name  = "HTTP_CLIENT_INSECURE_SKIP_VERIFY"
        value = "0"
      },
      {
        name  = "HTTP_CLIENT_TLS_HANDSHAKE_TIMEOUT"
        value = "7"
      },
      {
        name  = "HTTP_CLIENT_REQUEST_TIMEOUT"
        value = "25"
      }
    ]
    logConfiguration = {
      logDriver = "awslogs"
      options = {
        awslogs-group         = aws_cloudwatch_log_group.main.name
        awslogs-region        = "us-east-1"
        awslogs-stream-prefix = "devbot"
      }
    }
    portMappings = [
      {
        containerPort = 80
        hostPort      = 80
        protocol      = "tcp"
      }
    ]
    cpu = 0
    mountPoints = []
    volumesFrom = []
  }
}
